# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import booking_pb2 as booking__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in booking_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ClientAPIStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Login = channel.unary_unary(
                '/booking.ClientAPI/Login',
                request_serializer=booking__pb2.LoginRequest.SerializeToString,
                response_deserializer=booking__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.GetSeats = channel.unary_unary(
                '/booking.ClientAPI/GetSeats',
                request_serializer=booking__pb2.GetRequest.SerializeToString,
                response_deserializer=booking__pb2.GetResponse.FromString,
                _registered_method=True)
        self.ReserveSeat = channel.unary_unary(
                '/booking.ClientAPI/ReserveSeat',
                request_serializer=booking__pb2.ReserveRequest.SerializeToString,
                response_deserializer=booking__pb2.ReserveReply.FromString,
                _registered_method=True)
        self.CancelSeat = channel.unary_unary(
                '/booking.ClientAPI/CancelSeat',
                request_serializer=booking__pb2.CancelRequest.SerializeToString,
                response_deserializer=booking__pb2.Status.FromString,
                _registered_method=True)


class ClientAPIServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSeats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReserveSeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelSeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=booking__pb2.LoginRequest.FromString,
                    response_serializer=booking__pb2.LoginResponse.SerializeToString,
            ),
            'GetSeats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSeats,
                    request_deserializer=booking__pb2.GetRequest.FromString,
                    response_serializer=booking__pb2.GetResponse.SerializeToString,
            ),
            'ReserveSeat': grpc.unary_unary_rpc_method_handler(
                    servicer.ReserveSeat,
                    request_deserializer=booking__pb2.ReserveRequest.FromString,
                    response_serializer=booking__pb2.ReserveReply.SerializeToString,
            ),
            'CancelSeat': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelSeat,
                    request_deserializer=booking__pb2.CancelRequest.FromString,
                    response_serializer=booking__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'booking.ClientAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('booking.ClientAPI', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ClientAPI(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/booking.ClientAPI/Login',
            booking__pb2.LoginRequest.SerializeToString,
            booking__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSeats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/booking.ClientAPI/GetSeats',
            booking__pb2.GetRequest.SerializeToString,
            booking__pb2.GetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReserveSeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/booking.ClientAPI/ReserveSeat',
            booking__pb2.ReserveRequest.SerializeToString,
            booking__pb2.ReserveReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelSeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/booking.ClientAPI/CancelSeat',
            booking__pb2.CancelRequest.SerializeToString,
            booking__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class RaftStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestVote = channel.unary_unary(
                '/booking.Raft/RequestVote',
                request_serializer=booking__pb2.RequestVoteArgs.SerializeToString,
                response_deserializer=booking__pb2.RequestVoteReply.FromString,
                _registered_method=True)
        self.AppendEntries = channel.unary_unary(
                '/booking.Raft/AppendEntries',
                request_serializer=booking__pb2.AppendEntriesArgs.SerializeToString,
                response_deserializer=booking__pb2.AppendEntriesReply.FromString,
                _registered_method=True)


class RaftServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RequestVote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppendEntries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RaftServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestVote': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestVote,
                    request_deserializer=booking__pb2.RequestVoteArgs.FromString,
                    response_serializer=booking__pb2.RequestVoteReply.SerializeToString,
            ),
            'AppendEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.AppendEntries,
                    request_deserializer=booking__pb2.AppendEntriesArgs.FromString,
                    response_serializer=booking__pb2.AppendEntriesReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'booking.Raft', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('booking.Raft', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Raft(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RequestVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/booking.Raft/RequestVote',
            booking__pb2.RequestVoteArgs.SerializeToString,
            booking__pb2.RequestVoteReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AppendEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/booking.Raft/AppendEntries',
            booking__pb2.AppendEntriesArgs.SerializeToString,
            booking__pb2.AppendEntriesReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
